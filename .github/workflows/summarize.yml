# .github/workflows/pr-summary.yml

# Name of the workflow
name: 'AI PR Summarizer'

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events for the main branch
  pull_request:
    types: [opened, synchronize] # Runs when a PR is opened or updated with new commits

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  summarize:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Permissions needed for this job
    permissions:
      pull-requests: write # To comment on the pull request
      contents: read       # To check out the repository code

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checkout the repository code
      # This step checks out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags, required for a full diff

      # 2. Get the difference between the base and head of the PR
      # This step calculates the diff of the pull request to be sent to the AI model.
      - name: Get PR Diff
        id: diff
        run: |
          # The diff command compares the base of the PR with the head
          DIFF_CONTENT=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # We use a heredoc to handle multiline diff content and save it to a GitHub Actions output variable
          echo "diff_content<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 3. Generate the summary using the Gemini API
      # This step sends the code diff to the Gemini API and gets a summary.
      - name: Generate Summary with Gemini
        id: gemini
        run: |
          # The prompt for the AI model. You can customize this to change the style of the summary.
          PROMPT="Please summarize the following code changes from a pull request. Provide a brief, high-level explanation suitable for a PR comment. Focus on the 'what' and 'why' of the changes, not just a line-by-line description. Keep it concise and easy to read. Here is the diff:"

          # The cURL command to call the Gemini API
          # It sends the prompt and the diff content.
          # The API key is securely accessed from GitHub Secrets.
          API_RESPONSE=$(curl -s -H 'Content-Type: application/json' \
            -d '{"contents":[{"parts":[{"text": "'"${PROMPT}"'\n\n${{ steps.diff.outputs.diff_content }}"}]}]}' \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}")

          # We use jq to parse the JSON response from the API and extract the summary text.
          # This handles potential errors if the API response is not as expected.
          SUMMARY=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Could not generate a summary."')

          # Save the final summary to a GitHub Actions output variable
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 4. Post the summary as a comment on the pull request
      # This step uses the GitHub API to create a new comment on the PR.
      - name: Post Summary as PR Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the summary from the previous step's output
            const summary = `${{ steps.gemini.outputs.summary }}`;

            // Post the comment to the pull request
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### âœ¨ AI-Generated Summary\n\n${summary}`
            });
